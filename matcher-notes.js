[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount((c) => c + 1)}>\n    Count: {count}\n  </button>\n};\nrender(<Counter />);","type":"code","id":"az9bh"},{"content":"test('it shows a button', () => {\n  render(<Counter />);\n\n  const button = screen.getByRole('button');\n\n  expect(\n    button\n  ).toBeInTheDocument();\n});\n","type":"code","id":"ngyzj"},{"content":"test('it doesnt show an input', () => {\n  render(<Counter />);\n\n  const input = screen.queryByRole('textbox');\n  \n  expect(\n    input\n  ).not.toBeInTheDocument();\n});\n","type":"code","id":"hgs1s"},{"content":"import { screen, render, within } from '@testing-library/react';\r\n\r\nfunction FormData() {\r\n  return (\r\n    <div>\r\n      <button>Go Back</button>\r\n      <form aria-label=\"form\">\r\n        <button>Save</button>\r\n        <button>Cancel</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nrender(<FormData />);","type":"code","id":"mz7wp"},{"content":"function toContainRole(container, role, quantity = 1) {\r\n  const elements = within(container).queryAllByRole(role);\r\n\r\n  if (elements.length === quantity) {\r\n    return {\r\n      pass: true\r\n    };\r\n  }\r\n\r\n  return {\r\n    pass: false,\r\n    message: () => `Expected to find ${quantity} ${role} elements.\r\n    Found ${elements.length} instead.`\r\n  }\r\n}\r\n\r\nexpect.extend({ toContainRole });","type":"code","id":"bizxs"},{"content":"test('the form displays two buttons', () => {\r\n  render(<FormData />);\r\n\r\n  const form = screen.getByRole('form');\r\n  // const buttons = within(form).getAllByRole('button');\r\n\r\n\r\n  // const buttons = screen.getAllByRole('button');\r\n\r\n  // expect(buttons).toHaveLength(2);\r\n\r\n  expect(form).toContainRole('button', 1);\r\n});","type":"code","id":"5ly8l"}]