[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount((c) => c + 1)}>\n    Count: {count}\n  </button>\n};\nrender(<Counter />);","type":"code","id":"az9bh"},{"content":"test('it shows a button', () => {\n  render(<Counter />);\n\n  const button = screen.getByRole('button');\n\n  expect(\n    button\n  ).toBeInTheDocument();\n});\n","type":"code","id":"ngyzj"},{"content":"test('it doesnt show an input', () => {\n  render(<Counter />);\n\n  const input = screen.queryByRole('textbox');\n  \n  expect(\n    input\n  ).not.toBeInTheDocument();\n});\n","type":"code","id":"hgs1s"},{"content":"import { render, screen } from '@testing-library/react';\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul>  \r\n      <li>Red</li> \r\n      <li>Blue</li> \r\n      <li>Green</li> \r\n    </ul>\r\n  );\r\n}\r\n\r\nrender(<ColorList />);","type":"code","id":"0q302"},{"content":"test('getBy, queryBy, findBy 0 elements', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    () => screen.getByRole('textbox')\r\n  ).toThrow();\r\n\r\n  expect(screen.queryByRole('textbox')).toEqual(null);\r\n  // queryByRole, throws a null if no match\r\n\r\n  let errorThrown = false;\r\n  try {\r\n    await screen.findByRole('textbox');\r\n    // asynchronous\r\n\r\n  } catch (err) {\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n});","type":"code","id":"fb3cq"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    screen.getByRole('list')\r\n  ).toBeInTheDocument();\r\n  expect(\r\n    screen.queryByRole('list')\r\n  ).toBeInTheDocument();\r\n  expect(\r\n    await screen.findByRole('list')\r\n  ).toBeInTheDocument();\r\n});","type":"code","id":"pxlbf"},{"content":"test('getBy, queryBy, findBy when finding > 1 elements', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    () => screen.getByRole('listitem')\r\n  ).toThrow();\r\n  \r\n  expect(\r\n    () => screen.queryByRole('listitem')\r\n  ).toThrow();\r\n\r\n  // expect(screen.queryByRole('listitem')).toEqual(null);\r\n  // queryByRole, throws a null if no match\r\n\r\n  let errorThrown = false;\r\n  try {\r\n    await screen.findByRole('listitem');\r\n    // asynchronous\r\n\r\n  } catch (err) {\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n});","type":"code","id":"tq8le"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    screen.getAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n  \r\n  expect(\r\n    screen.queryAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n  \r\n  expect(\r\n    await screen.findAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n});","type":"code","id":"trnge"},{"content":"test('favor using getBy to prove an element exists', () => {\r\n  render(<ColorList />);\r\n\r\n  const element = screen.getByRole('list');\r\n\r\n  expect(element).toBeInTheDocument();\r\n});","type":"code","id":"9n31e"},{"content":"test('favor queryBy when proviing an element does not exist', () => {\r\n  render(<ColorList />);\r\n\r\n  const element = screen.queryByRole('textbox');\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n\r\n});","type":"code","id":"cnv6h"},{"content":"import { useState, useEffect } from 'react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'green', 'blue']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors()\n      .then(c => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LoadableColorList />);","type":"code","id":"sgx73"},{"content":"test('favor findBy or findAllBy when data fetching', async () => {\r\n  \r\n  render(<LoadableColorList />);\r\n\r\n  const els = await screen.findAllByRole('listitem');\r\n  // await becasue fetch with async and findallbyrole with promise\r\n\r\n  expect(els).toHaveLength(3);\r\n});","type":"code","id":"h6xg5"}]